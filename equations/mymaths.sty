\ProvidesPackage{mymaths}

\RequirePackage{mathtools}
\RequirePackage{amssymb}

\newcommand*\Z{\mathbb Z}
\newcommand*\R{\mathbb R}
\renewcommand*\C{\mathbb C}
\newcommand*\N{\mathbb N}
\newcommand*\Q{\mathbb Q}
\renewcommand*\P{\mathbb P}
\newcommand*\seq[1]{(#1 _n)_{n = 1}^\infty}

\newcommand*\defeq\coloneqq

% this is the hill I'm prepared to die on
\let\uglyepsilon\epsilon
\let\epsilon\varepsilon
\let\uglyphi\phi
\let\phi\varphi

\DeclarePairedDelimiter\abs\lvert\rvert
\DeclarePairedDelimiter\set\{\}
\DeclarePairedDelimiter\parens()
\DeclarePairedDelimiter\bracks[]
\DeclarePairedDelimiter\intoo()
\DeclarePairedDelimiter\intco[)
\DeclarePairedDelimiter\intcc[]
\DeclarePairedDelimiter\cycsgp\langle\rangle

% work-around for proof from
% https://tex.stackexchange.com/questions/305174/proof-environment-produces-proof-proof-only-when-thmbox-is-used
\RequirePackage{amsthm}

% letltxmacro is like a cleverer version of let, that works with robust
% commands or something
% https://tex.stackexchange.com/questions/88001/when-to-use-letltxmacro
\RequirePackage{letltxmacro}

\LetLtxMacro\amsproof\proof
\LetLtxMacro\amsendproof\endproof

\RequirePackage{thmtools}

\AtBeginDocument{%
  \LetLtxMacro\proof\amsproof
  \LetLtxMacro\endproof\amsendproof
}

\declaretheorem{theorem}
\declaretheorem[sibling=theorem]{lemma}
\declaretheorem[sibling=theorem]{corollary}

\RequirePackage{xparse}

\newcommand*\diff{\mathrm d}

% macro to typeset a simple derivative. If you want the differentiand to be in
% the numerator, give it as a <> delimited optional argument.
% Similarly, the order of the derivative can be given as a [] optional argument.
\NewDocumentCommand\dv{ o d<> m }{%
 \IfValueTF{#2}{%
  \IfValueTF{#1}{%
   \frac{\diff^{#1} #2}{{\diff #3}^{#1}}%
  }{%
   \frac{\diff #2}{\diff #3}%
  }%
 }{%
  \IfValueTF{#1}{%
   \frac{\diff^{#1}}{{\diff #3}^{#1}}%
  }{%
   \frac{\diff}{\diff #3}%
  }%
 }%
}

\NewDocumentCommand\fdv{ o d<> m }{%
 \IfValueTF{#2}{%
  \IfValueTF{#1}{%
   {\diff^{#1} #2} / {{\diff #3}^{#1}}%
  }{%
   {\diff #2} / {\diff #3}%
  }%
 }{%
  \IfValueTF{#1}{%
   {\diff^{#1}} / {{\diff #3}^{#1}}%
  }{%
   {\diff} / {\diff #3}%
  }%
 }%
}

% macro to typeset an integral, centralised etc and so on and so forth.
% The two optional arguments are upper and lower bounds (really subscript and
% superscript on the integral, it's up to you what you do with it)
\NewDocumentCommand\integ{ o d<> m m }{%
 \IfValueTF{#1}{%
  \IfValueTF{#2}{%
   \int_{#1}^{#2} #3 \, \diff #4%
  }{%
   \int_{#1} #3 \, \diff #4%
  }%
 }{%
  \IfValueTF{#2}{%
   \int^{#2} #3 \, \diff #4%
  }{%
   \int #3 \, \diff #4%
  }%
 }%
}

